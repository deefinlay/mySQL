
###############################################################################################
# INSERTING SKELETON RECORDS
###############################################################################################

############### skeleton booker record,  
############### auto_increment sets PK booker_id  

INSERT INTO booker  
    (booker_id, booker_title_id, booker_firstname, booker_lastname, booker_email, 
     booker_password, booker_address1, booker_address2, booker_town_city,  
     booker_postcode_zip, booker_country, booker_dialcode, booker_telephone)  
VALUES 
    (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);  
 
############### skeleton booking,  
############### auto_increment sets PK booking_id,  
############### booking_id is last_inserted key value (from the booker table) 

INSERT INTO booking  
    (booking_id, booker_id)  
VALUES  
    (NULL, LAST_INSERT_ID());  

###############################################################################################
# RETRIEVE REGION SPECIFIC DEPARTURE AND DESTINATION AIRPORTS (AND ALSO GROUPED BY COUNTRY)
###############################################################################################

############### Departure points in the UK
SET @country = "United Kingdom"; 
SELECT airport_name AS "UK Departure Points"
FROM airport a  
INNER JOIN city  
    ON a.airport_city_id = city.city_id  
INNER JOIN country  
    ON city.country_id = country.country_id 
WHERE country.country = @country
ORDER BY airport_name ASC; 

############### destinations from Belfast Intl
SET @dep_airport = "Belfast Intl"; 
SELECT airport_name AS "Available Destination From Belfast Intl" 
FROM airport a 
INNER JOIN route r  
    ON a.airport_id = r.destination_airport_id 
WHERE r.departure_airport_id =  
   (SELECT airport_id  
    FROM airport  
    WHERE airport.airport_name = @dep_airport)
ORDER BY airport_name ASC; 

############### destination airports grouped by country
SELECT country, COUNT(*) AS "Number of Destinations" 
FROM country c
INNER JOIN city
	ON city.country_id = c.country_id
INNER JOIN airport a
	ON city.city_id = a.airport_city_id
WHERE airport_city_id IN
   (SELECT airport_city_id  
	FROM airport a 
	INNER JOIN route r  
    	ON a.airport_id = r.destination_airport_id 
	WHERE r.departure_airport_id =  
   	   (SELECT airport_id  
    	    FROM airport  
    	    WHERE airport.airport_name = @dep_airport))
GROUP BY country;

###############################################################################################
# RETRIEVE AVAILABLE OUTWARD FLIGHTS ON ROUTE ACROSS A GIVEN MONTH RANGE
###############################################################################################

SET @outward_route = 6; 

############### this month's flights (after today)
SET @monthzero = (MONTH(CURRENT_DATE) MOD 12);
SELECT takeoff_date AS "Outward Flights This Month"
FROM scheduled_flight  
WHERE route_id = @outward_route  
    AND MONTH(takeoff_date) = @monthzero
    AND DATEDIFF(takeoff_date, CURRENT_DATE) > 0;

############### next month's flights
SET @monthplusone = (@monthzero MOD 12) + 1;
SELECT takeoff_date AS "Outward Flights Next Month"
FROM scheduled_flight  
WHERE route_id = @outward_route  
    AND MONTH(takeoff_date) = @monthplusone;
    
############### two months ahead flights
SET @monthplustwo = (@monthplusone MOD 12) + 1;
SELECT takeoff_date AS "Outward Flights Two Months Ahead" 
FROM scheduled_flight  
WHERE route_id = @outward_route  
    AND MONTH(takeoff_date) = @monthplustwo;

###############################################################################################
# AUTOMATICALLY SELECT HOMEWARD ROUTE AND GET AVAILABLE DATES
###############################################################################################

############### modelling user selected choices
SET @outward_route = 6; 
SET @dep_date = "2020-03-12";

############### automatically calculate the homebound route
SET @homeward_route =  
    (SELECT route_id  
    FROM route  
    WHERE departure_airport_id = 
       (SELECT destination_airport_id  
        FROM route  
        WHERE route_id = @outward_route) 
    AND destination_airport_id =
       (SELECT departure_airport_id  
        FROM route  
        WHERE route_id = @outward_route));

############### assigns homeward route to route id 12
############### now use this to retrieve homeward routes 
############### for this month's flights (after today)
SET @monthzero = (MONTH(CURRENT_DATE) MOD 12);
SELECT takeoff_date AS "Homeward Flights This Month"
FROM scheduled_flight  
WHERE route_id = @homeward_route  
    AND MONTH(takeoff_date) = @monthzero
    AND DATEDIFF(takeoff_date, @dep_date) > 0;

############### next month's flights
SET @monthplusone = (@monthzero MOD 12) + 1;
SELECT takeoff_date AS "Homeward Flights Next Month"
FROM scheduled_flight  
WHERE route_id = @homeward_route  
    AND MONTH(takeoff_date) = @monthplusone
    AND DATEDIFF(takeoff_date, @dep_date) > 0;
    
############### two months ahead flights
SET @monthplustwo = (@monthplusone MOD 12) + 1;
SELECT takeoff_date AS "Homeward Flights Two Months Ahead" 
FROM scheduled_flight  
WHERE route_id = @homeward_route  
    AND MONTH(takeoff_date) = @monthplustwo
    AND DATEDIFF(takeoff_date, @dep_date) > 0;

###############################################################################################
# VIEW LOWEST FARES FOR NEXT MONTH (COULD BE ALTERED AS NEEDED) 
###############################################################################################

############## set the chosen route, the passenger as adult  
############### and fare as standard 
SET @chosen_route = 6; 
SET @paxtype = 1; 
SET @faretype = 1; 
SELECT sf.takeoff_date, sff.scheduled_flight_fare AS "Lowest Fares Next Month"  
FROM scheduled_flight sf 
INNER JOIN scheduled_flight_fare sff 
    ON sf.scheduled_flight_id = sff.scheduled_flight_id 
WHERE sf.route_id = @chosen_route 
    AND MONTH(takeoff_date) = (MONTH(CURRENT_DATE) MOD 12) + 1 
    AND sff.passenger_type_id = @paxtype 
    AND sff.fare_type_id = @faretype 
ORDER BY sff.scheduled_flight_fare; 

###############################################################################################
#INSERT SKELETON PASSENGER RECORDS
###############################################################################################

SET @bookid = "14"; 

############### modelling user-entered details 
SET @p1type = "1"; 
SET @p2type = "2"; 
SET @p3type = "2"; 
SET @p4type = "3";
 
INSERT INTO passenger  
    (passenger_id, passenger_type_id, booking_id, is_booker, passenger_title_id,  
     passenger_firstname, passenger_lastname)  
VALUES  
    (NULL, @p1type, @bookid, NULL, NULL, NULL, NULL),  
    (NULL, @p2type, @bookid, NULL, NULL, NULL, NULL), 
    (NULL, @p3type, @bookid, NULL, NULL, NULL, NULL), 
    (NULL, @p4type, @bookid, NULL, NULL, NULL, NULL);  

###############################################################################################
RETRIEVE FLIGHTS AND FARES (STANDARD AND FLEXI) FOR CHOSEN ROUTE WITHIN GIVEN DATE RANGE
###############################################################################################

############### modelling user selected choices
############### and setting passenger type as adult
SET @chosen_route = 6; 
SET @provisional_date = "2020-12-20"; 
SET @paxtype = 1;

############### the range of returned dates would be set by system software
SET @days = 10;

SELECT sf.scheduled_flight_id AS "Flight",
    sf.takeoff_date AS "Date", 
    sf.takeoff_time AS "Time", 
    sff.scheduled_flight_fare AS "Price",
    ft.fare_type_name AS "Fare Type"
FROM scheduled_flight sf  
INNER JOIN scheduled_flight_fare sff
    ON sf.scheduled_flight_id = sff.scheduled_flight_id
INNER JOIN fare_type ft
    ON sff.fare_type_id = ft.fare_type_id
WHERE sf.route_id = @chosen_route  
AND sf.takeoff_date 
BETWEEN  
    DATE_SUB(@provisional_date, INTERVAL @days DAY)
    AND
    DATE_ADD(@provisional_date, INTERVAL @days DAY)
    AND sff.passenger_type_id = @paxtype
ORDER BY sf.takeoff_date ASC, ft.fare_type_name DESC;  


############### modelling the return route retrieved already as id 12
############### as well as user selected date
############### and setting passenger type as adult
SET @chosen_route = 12; 
SET @provisional_date = "2020-12-28"; 
SET @paxtype = 1;

############### the range of returned dates would be set by system software
SET @days = 10;

SELECT sf.scheduled_flight_id AS "Flight",
    sf.takeoff_date AS "Date", 
    sf.takeoff_time AS "Time", 
    sff.scheduled_flight_fare AS "Price",
    ft.fare_type_name AS "Fare Type"
FROM scheduled_flight sf  
INNER JOIN scheduled_flight_fare sff
    ON sf.scheduled_flight_id = sff.scheduled_flight_id
INNER JOIN fare_type ft
    ON sff.fare_type_id = ft.fare_type_id
WHERE sf.route_id = @chosen_route  
AND sf.takeoff_date BETWEEN  
    DATE_SUB(@provisional_date, INTERVAL @days DAY)
    AND
    DATE_ADD(@provisional_date, INTERVAL @days DAY)
    AND sff.passenger_type_id = @paxtype
ORDER BY sf.takeoff_date ASC, ft.fare_type_name DESC;

###############################################################################################
FLAG THE LOWEST FARE (modification of above fares code)
###############################################################################################

############### for the outward route id 6 or homeward route 12
############### as well as user selected date
############### and setting passenger type as adult and faretype to standard
SET @chosen_route = 6; 
SET @provisional_date = "2020-12-20"; 
SET @paxtype = 1;
SET @faretype = 1;

############### the range of returned dates would be set by system software
SET @days = 10;

SELECT sf.scheduled_flight_id AS "Flight",
    sf.takeoff_date AS "Date", 
    sf.takeoff_time AS "Time", 
    MIN(sff.scheduled_flight_fare) AS "Lowest Fare"
FROM scheduled_flight sf  
INNER JOIN scheduled_flight_fare sff
    ON sf.scheduled_flight_id = sff.scheduled_flight_id
INNER JOIN fare_type ft
    ON sff.fare_type_id = ft.fare_type_id
WHERE sf.route_id = @chosen_route  
AND sf.takeoff_date BETWEEN  
    DATE_SUB(@provisional_date, INTERVAL @days DAY)
    AND
    DATE_ADD(@provisional_date, INTERVAL @days DAY)
    AND sff.passenger_type_id = @paxtype
    AND sff.fare_type_id = @faretype
ORDER BY sf.takeoff_date ASC, ft.fare_type_name DESC; 

###############################################################################################
RETRIEVE NEARBY AIRPORTS TO THE CHOSEN DEPARTURE AIRPORT 
(ALSO FLYING TO THE CHOSEN DESTINATION AIRPORT)
###############################################################################################

############### modelling user selected choices
############### depart London Luton arrive Belfast Intl
SET @dep_airport = 1;  
SET @dest_airport = 2;

############### Haversine formula
SELECT a.airport_name AS Chosen, b.airport_name AS Alternative,   
    ROUND(
    	111.045   
    	* DEGREES(ACOS(LEAST(1.0, COS(RADIANS(a.airport_Latitude))  
    	* COS(RADIANS(b.airport_Latitude))  
    	* COS(RADIANS(a.airport_Longitude - b.airport_Longitude))   
	        + SIN(RADIANS(a.airport_Latitude))  
	    * SIN(RADIANS(b.airport_Latitude)))))
    ,2) AS "Kilometres"  

FROM airport a   
INNER JOIN airport b  
    ON a.airport_id <> b.airport_id  
WHERE a.airport_id = @dep_airport  
AND b.airport_id =   
    (SELECT b.airport_id  
     WHERE b.airport_id IN  
        (SELECT r.departure_airport_id  
         FROM route r  
         WHERE r.destination_airport_id = @dest_airport)) 
GROUP BY Kilometres  
HAVING Kilometres < 400; 


###############################################################################################
RETRIEVE SPECIFIC FLIGHT ID FROM USER CHOICES
###############################################################################################

############### modelling user selected choices
############### for route, date, time

SET @chosen_route = 6; 
SET @provisional_date = "2020-12-20"; 
SET @chosen_time = "10:00"; 
SELECT scheduled_flight_id  
    FROM scheduled_flight  
    WHERE route_id = @chosen_route  
    AND takeoff_date = @provisional_date 
    AND takeoff_time = @chosen_time; 
############### returns flight with an id of 18 


SET @chosen_route = 12; 
SET @provisional_date = "2020-12-28"; 
SET @chosen_time = "12:15"; 
SELECT scheduled_flight_id  
    FROM scheduled_flight  
    WHERE route_id = @chosen_route  
    AND takeoff_date = @provisional_date 
    AND takeoff_time = @chosen_time; 
############### returns flight with an id of 20

###############################################################################################
INSERT PASSENGER FLIGHT TICKET RECORDS INCLUDING FARES
###############################################################################################

############### modelling user-entered details for booking id 8
############### flight id 18 and fare type standard
SET @bookid = 14;  
SET @chosen_flight = 18;  
SET @faretype = 1;  
 

############### the transaction block would be iterated through by system software
############### for each passenger id with the above booking id
############### ie. passengers 25 thru 28
SET @paxid = 28; 

START TRANSACTION; 

############### calculate the flight cost for this passenger 
SET @paxflightcost =  
   (SELECT scheduled_flight_fare FROM scheduled_flight_fare sff    
    WHERE sff.scheduled_flight_id = @chosen_flight  
        AND sff.fare_type_id = @faretype  
        AND sff.passenger_type_id =  
           (SELECT passenger_type_id from passenger p 
            WHERE p.passenger_id = @paxid)); 
 
INSERT INTO flight_ticket  
   (flight_ticket_id, scheduled_flight_id, fare_type_id, passenger_id, booking_id,  
    flight_cost_by_passenger)   
VALUES  
    (NULL, @chosen_flight, @faretype, @paxid, @bookid,  
     @paxflightcost); 
     
COMMIT; 

############### repeating for the homeward flight for same passenger
SET @chosen_flight = 20;  
 
START TRANSACTION; 

############### calculate the flight cost for this passenger 
SET @paxflightcost =  
   (SELECT scheduled_flight_fare FROM scheduled_flight_fare sff    
    WHERE sff.scheduled_flight_id = @chosen_flight  
        AND sff.fare_type_id = @faretype  
        AND sff.passenger_type_id =  
           (SELECT passenger_type_id from passenger p 
            WHERE p.passenger_id = @paxid)); 
 
INSERT INTO flight_ticket  
   (flight_ticket_id, scheduled_flight_id, fare_type_id, passenger_id, booking_id,  
    flight_cost_by_passenger)   
VALUES  
    (NULL, @chosen_flight, @faretype, @paxid, @bookid,  
     @paxflightcost); 
     
COMMIT; 

###############################################################################################
RETRIEVE FLIGHT AND SEAT BOOKING STATUS SUMMARY
###############################################################################################

############### modelling user selected choices 
SET @chosen_flight = 18;  
 
############### modelling the 6 column configuration 
############### this would probably be a constant in code 
SET @columns := 6;  

############### total seats on the aircraft 
############### for this flight 
SET @totalseats =  
    (SELECT @columns * COUNT(aircraft_model_id)  
     FROM aircraft_row_by_type   
     WHERE aircraft_model_id =   
        (SELECT f.aircraft_model_id   
         FROM fleet f   
         INNER JOIN scheduled_flight sf  
             ON f.fleet_id = sf.fleet_id  
         WHERE sf.scheduled_flight_id = @chosen_flight));  

############### total passengers with tickets 
############### for this flight  
SET @totalpax =  
   (SELECT COUNT(passenger_id)  
    FROM flight_ticket ft  
    WHERE ft.scheduled_flight_id = @chosen_flight  
    AND ft.passenger_id IN  
        (SELECT p.passenger_id  
         FROM passenger p 
         WHERE p.passenger_type_id IN  
             (SELECT pt.passenger_type_id  
              FROM passenger_type pt  
              WHERE pt.passenger_type IN ("Adult", "Child")))); 

############### total passengers with allocated
############### seats for this flight   
SET @bookedseats =
   (SELECT COUNT(fsp.booking_id) 
    FROM flight_seat_plan fsp
    WHERE fsp.scheduled_flight_id = @chosen_flight
        AND fsp.booking_id IS NOT NULL);

############### display the flight booking summary   
SELECT @totalseats AS "Total Seating Capacity", 
    @totalpax AS "Total Flight Passengers", 
    @totalseats - @totalpax AS "Total Flight Spaces",
    @totalpax - @bookedseats AS "Passengers With NO Allocated Seat"; 

###############################################################################################
RETRIEVE FLIGHT COSTS SUMMARY AND INSERT FLIGHTS LINE ITEM IN THE BOOKING TABLE
###############################################################################################

############### modelling user chosen values 
SET @bookid = 13; 
  
############### outward flight is id 18
SET @outward_flight = 18;
SELECT pt.passenger_type AS "Type", 
    COUNT(pt.passenger_type) AS "Number",  
    ft.flight_cost_by_passenger AS "Outward Flight Cost" 
FROM passenger p 
INNER JOIN passenger_type pt 
    ON p.passenger_type_id = pt.passenger_type_id 
INNER JOIN flight_ticket ft 
    ON ft.passenger_id = p.passenger_id 
WHERE ft.booking_id = @bookid
    AND ft.scheduled_flight_id = @outward_flight
    GROUP BY pt.passenger_type; 

############### homeward flight is id 20
SET @homeward_flight = 20;
SELECT pt.passenger_type AS "Type", 
    COUNT(pt.passenger_type) AS "Number",  
    ft.flight_cost_by_passenger AS "Homeward Flight Cost" 
FROM passenger p 
INNER JOIN passenger_type pt 
    ON p.passenger_type_id = pt.passenger_type_id 
INNER JOIN flight_ticket ft 
    ON ft.passenger_id = p.passenger_id 
WHERE ft.booking_id = @bookid
    AND ft.scheduled_flight_id = @homeward_flight
    GROUP BY ft.scheduled_flight_id, pt.passenger_type; 
 
############### calculating the overall total cost of all flights on this booking 
SET @totalflightcost =  
    (SELECT SUM(flight_cost_by_passenger)   
         FROM flight_ticket  
         WHERE booking_id = @bookid); 
 
############### calculate current basket total amount for booking 
SELECT @totalflightcost AS "Basket Total"; 

         
############### use @totalflightcost to insert booking line item
SET @linetype = 1; 
INSERT INTO booking_line_item  
    (booking_line_item_id, booking_id, line_item_type_id, line_item_amount)  
VALUES  
    (NULL, @bookid, @linetype, @totalflightcost);

###############################################################################################
RETRIEVE A COMPLETE LIST OF SEATS WITh BOOKING STATUS AND PRICE ON THIS FLIGHT
###############################################################################################

############### modelling user selected choices
############### flight 18 and standard fare type
SET @chosen_flight = 18; 
SET @faretype = 1; 

SELECT art.seat_row_number, srt.seat_row_type_name, asp.allocated_seat_price, 
    (SELECT fsp.booking_id
     FROM flight_seat_plan fsp
     WHERE seat_column_letter = "A"
     AND scheduled_flight_id = @chosen_flight
     AND art.aircraft_seat_row_id = fsp.aircraft_seat_row_id) AS A,
    (SELECT fsp.booking_id
     FROM flight_seat_plan fsp
     WHERE seat_column_letter = "B"
     AND scheduled_flight_id = @chosen_flight
     AND art.aircraft_seat_row_id = fsp.aircraft_seat_row_id) AS B,
    (SELECT fsp.booking_id
     FROM flight_seat_plan fsp
     WHERE seat_column_letter = "C"
     AND scheduled_flight_id = @chosen_flight
     AND art.aircraft_seat_row_id = fsp.aircraft_seat_row_id) AS C,
    (SELECT fsp.booking_id
     FROM flight_seat_plan fsp
     WHERE seat_column_letter = "D"
     AND scheduled_flight_id = @chosen_flight
     AND art.aircraft_seat_row_id = fsp.aircraft_seat_row_id) AS D,
    (SELECT fsp.booking_id
     FROM flight_seat_plan fsp
     WHERE seat_column_letter = "E"
     AND scheduled_flight_id = @chosen_flight
     AND art.aircraft_seat_row_id = fsp.aircraft_seat_row_id) AS E,
    (SELECT fsp.booking_id
     FROM flight_seat_plan fsp
     WHERE seat_column_letter = "F"
     AND scheduled_flight_id = @chosen_flight
     AND art.aircraft_seat_row_id = fsp.aircraft_seat_row_id) AS F
FROM aircraft_row_by_type art  
INNER JOIN seat_row_type srt  
    ON art.seat_row_type_id = srt.seat_row_type_id  
INNER JOIN allocated_seat_price asp  
    ON art.seat_row_type_id = asp.seat_row_type_id 
WHERE art.aircraft_model_id =   
    (SELECT aircraft_model_id  
     FROM fleet f  
     INNER JOIN scheduled_flight sf  
         ON f.fleet_id = sf.fleet_id  
     WHERE sf.scheduled_flight_id = @chosen_flight) 
         AND asp.fare_type_id = @faretype 
GROUP BY art.seat_row_number; 

############### returns all rows on flight 18  
############### alongside prices for Standard Fare 


###############################################################################################
FLAG SEATS AS BOOKED ON THIS FLIGHT
###############################################################################################

SET @bookid = 14; 
############### modelling user selected choices
SET @chosen_flight = 18; 
SET @seatrow = 5; 

START TRANSACTION;

############### get the specific row on the flight
SET @asrid = 
   (SELECT art.aircraft_seat_row_id  
    FROM aircraft_row_by_type art 
    WHERE art.seat_row_number = @seatrow AND art.aircraft_model_id = 
        (SELECT f.aircraft_model_id FROM fleet f 
         INNER JOIN scheduled_flight sf 
             ON f.fleet_id = sf.fleet_id 
         WHERE sf.scheduled_flight_id = @chosen_flight)); 

############### counting the number of non-infant passengers on this booking
############### as infants are required to sit with an adult
SELECT COUNT(passenger_id) AS "Number of Seats Required"
    FROM passenger
    WHERE booking_id = @bookid;

############### flag seats ie. columns on the selected flight row
############### as booked by marking them with the booking id
############### according to the number of non-infant passengers as above
############### modelled here as non-iterated manual inserts in rows A, B, C
INSERT INTO flight_seat_plan  
    (flight_seat_id, aircraft_seat_row_id, scheduled_flight_id,  
    seat_column_letter, booking_id)  
VALUES 
    (NULL, @asrid, @chosen_flight, 'A', @bookid),  
    (NULL, @asrid, @chosen_flight, 'B', @bookid), 
    (NULL, @asrid, @chosen_flight, 'C', @bookid); 

COMMIT;


############### modelling user selected choices
SET @chosen_flight = 20; 
SET @seatrow = 5; 

START TRANSACTION;

############### get the specific row on the flight
SET @asrid = 
   (SELECT art.aircraft_seat_row_id  
    FROM aircraft_row_by_type art 
    WHERE art.seat_row_number = @seatrow AND art.aircraft_model_id = 
        (SELECT f.aircraft_model_id FROM fleet f 
         INNER JOIN scheduled_flight sf 
             ON f.fleet_id = sf.fleet_id 
         WHERE sf.scheduled_flight_id = @chosen_flight)); 

############### counting the number of non-infant passengers on this booking
############### as infants are required to sit with an adult
SELECT COUNT(passenger_id) AS "Number of Seats Required"
    FROM passenger
    WHERE booking_id = @bookid;

############### flag seats ie. columns on the selected flight row
############### as booked by marking them with the booking id
############### according to the number of non-infant passengers as above
############### modelled here as non-iterated manual inserts in rows A, B, C
INSERT INTO flight_seat_plan  
    (flight_seat_id, aircraft_seat_row_id, scheduled_flight_id,  
    seat_column_letter, booking_id)  
VALUES 
    (NULL, @asrid, @chosen_flight, 'A', @bookid),  
    (NULL, @asrid, @chosen_flight, 'B', @bookid), 
    (NULL, @asrid, @chosen_flight, 'C', @bookid); 

COMMIT;

###############################################################################################
RETRIEVE SEAT SELECTION COSTS SUMMARY AND BASKET TOTAL
###############################################################################################

############### modelling user selected choices for flights 18 and 20 
############### faretype as standard 
############### line type of 5 represents Allocated Seating 
SET @bookid = 13;  
SET @outward_flight = 18;
SET @homeward_flight = 20;  
SET @faretype = 1;  

############### linetype 5 is allocated seating costs
SET @linetype = 5;  

############### display outward flight summary with costs
SELECT srt.seat_row_type_name, art.seat_row_number, fsp.seat_column_letter,
   (SELECT allocated_seat_price FROM allocated_seat_price asp
    WHERE asp.scheduled_flight_id = @outward_flight
    AND asp.seat_row_type_id = srt.seat_row_type_id
    AND asp.fare_type_id = @faretype) AS "Seat Price"
FROM flight_seat_plan fsp
INNER JOIN aircraft_row_by_type art
    ON art.aircraft_seat_row_id = fsp.aircraft_seat_row_id
INNER JOIN seat_row_type srt
    ON art.seat_row_type_id = srt.seat_row_type_id
WHERE fsp.scheduled_flight_id = @outward_flight
    AND fsp.booking_id = @bookid;
    
############### display homeward flight summary with costs
SELECT srt.seat_row_type_name, art.seat_row_number, fsp.seat_column_letter,
   (SELECT allocated_seat_price FROM allocated_seat_price asp
    WHERE asp.scheduled_flight_id = @homeward_flight
    AND asp.seat_row_type_id = srt.seat_row_type_id
    AND asp.fare_type_id = @faretype) AS "Seat Price"
FROM flight_seat_plan fsp
INNER JOIN aircraft_row_by_type art
    ON art.aircraft_seat_row_id = fsp.aircraft_seat_row_id
INNER JOIN seat_row_type srt
    ON art.seat_row_type_id = srt.seat_row_type_id
WHERE fsp.scheduled_flight_id = @homeward_flight
    AND fsp.booking_id = @bookid;

############### calculate outward flight costs
SET @outwardseatcosts = 
(SELECT SUM(asp.allocated_seat_price)
    FROM allocated_seat_price asp  
    INNER JOIN seat_row_type srt   
        ON asp.seat_row_type_id = srt.seat_row_type_id  
    INNER JOIN aircraft_row_by_type art   
        ON srt.seat_row_type_id = art.seat_row_type_id  
    INNER JOIN flight_seat_plan fsp   
        ON fsp.aircraft_seat_row_id = art.aircraft_seat_row_id  
    WHERE asp.scheduled_flight_id = @outward_flight 
        AND fsp.scheduled_flight_id = @outward_flight
        AND asp.fare_type_id = @faretype   
        AND fsp.booking_id = @bookid); 

############### calculate homeward flight costs        
SET @homewardseatcosts = 
(SELECT SUM(asp.allocated_seat_price)
    FROM allocated_seat_price asp  
    INNER JOIN seat_row_type srt   
        ON asp.seat_row_type_id = srt.seat_row_type_id  
    INNER JOIN aircraft_row_by_type art   
        ON srt.seat_row_type_id = art.seat_row_type_id  
    INNER JOIN flight_seat_plan fsp   
        ON fsp.aircraft_seat_row_id = art.aircraft_seat_row_id  
    WHERE asp.scheduled_flight_id = @homeward_flight 
        AND fsp.scheduled_flight_id = @homeward_flight
        AND asp.fare_type_id = @faretype   
        AND fsp.booking_id = @bookid);

############### calculate total costs for seating for this booking
SET @seatstotal = 
    (SELECT @outwardseatcosts + @homewardseatcosts);

############### display total seating costs
SELECT @outwardseatcosts AS "Outward Seat Costs", 
    @homewardseatcosts AS "Outward Seat Costs",
    @seatstotal AS "Total Seating Costs";

############### calculate current basket total amount for booking
SELECT @baskettotal := SUM(line_item_amount) + @seatstotal AS "Basket Total"
    FROM booking_line_item
WHERE booking_id = @bookid;

INSERT INTO booking_line_item   
    (booking_line_item_id, booking_id, line_item_type_id, line_item_amount)   
VALUES   
    (NULL, @bookid, @linetype, @seatstotal); 

###############################################################################################
RETRIEVE BAGGAGE PRICES
###############################################################################################

############### modelling user selected choices
SET @chosen_flight = 18; 

SELECT bt.baggage_type AS "Bag Type", 
    bp.baggage_price AS "Price Per Flight"
FROM baggage_price bp 
INNER JOIN baggage_type bt 
    ON bp.baggage_type_id = bt.baggage_type_id 
WHERE scheduled_flight_id = @chosen_flight 
ORDER BY bp.baggage_price;

###############################################################################################
RETRIEVE SPORTS EQ PRICES
###############################################################################################

SELECT et.equipment_type AS "Equipment Type", 
    ec.equipment_price AS "Price Per Flight"
FROM sports_equipment_type et 
INNER JOIN sports_equipment_category ec 
    ON et.equipment_category_id = ec.equipment_category_id 
ORDER BY et.equipment_type;  

###############################################################################################
INSERT CHOSEN QUANTITY OF BAGS AND EQUIPMENT INTO TABLES
###############################################################################################

START TRANSACTION;   
  
SET @bookid = 13;  
################ modelling user selected choices 
################ 1x cabin bag, 2x 15Kg hold lubbage and 2x snowboard 
SET @outward_flight = 18;  
SET @homeward_flight = 20;   
SET @quantity_cabin = 2;     
SET @quantity_15Kg = 1;     
SET @quantity_hangglider = 1;
SET @quantity_firearm = 1;     
    
############### cabin bag, set bag type and retrieve costs per leg 
SET @bagtype =        
    (SELECT baggage_type_id     
     FROM baggage_type     
     WHERE baggage_type = "Cabin Bag");     
    
SET @bag_cost_for_outward_journey =   
    (SELECT baggage_price    
     FROM baggage_price    
     WHERE baggage_type_id = @bagtype    
        AND scheduled_flight_id = @outward_flight); 
 
SET @bag_cost_for_homeward_journey =   
    (SELECT baggage_price    
     FROM baggage_price    
     WHERE baggage_type_id = @bagtype    
        AND scheduled_flight_id = @homeward_flight);    
  
############### insert baggage record into baggage table 
INSERT INTO baggage   
    (baggage_id, booking_id, baggage_type_id,   
     baggage_quantity, bag_cost_by_booking)     
VALUES     
    (NULL, @bookid, @bagtype,   
     @quantity_cabin,  
     @bag_cost_for_outward_journey + @bag_cost_for_homeward_journey);   
 
  
    
############### 15Kg bag, set bag type and retrieve costs per leg 
SET @bagtype =        
    (SELECT baggage_type_id     
     FROM baggage_type     
     WHERE baggage_type = "Hold Luggage 15Kg");     
    
SET @bag_cost_for_outward_journey =   
    (SELECT baggage_price    
     FROM baggage_price    
     WHERE baggage_type_id = @bagtype    
        AND scheduled_flight_id = @outward_flight);  
 
SET @bag_cost_for_homeward_journey =   
    (SELECT baggage_price    
     FROM baggage_price    
     WHERE baggage_type_id = @bagtype    
        AND scheduled_flight_id = @homeward_flight); 
       
############### insert baggage record into baggage table 
INSERT INTO baggage   
    (baggage_id, booking_id, baggage_type_id,   
     baggage_quantity, bag_cost_by_booking)     
VALUES     
(NULL, @bookid, @bagtype,   
     @quantity_15Kg, 
     @bag_cost_for_outward_journey + @bag_cost_for_homeward_journey);  
 
 
         
############### Hang glider set eq type and category in order to retrieve price 
SET @eq_typeid =         
    (SELECT equipment_type_id     
     FROM sports_equipment_type    
     WHERE equipment_type = "Hang glider");   
   
SET @eq_catid =         
    (SELECT equipment_category_id     
     FROM sports_equipment_type    
     WHERE equipment_type = "Hang glider");    
    
SET @eq_cost_for_journey =    
    (SELECT equipment_price     
     FROM sports_equipment_category    
     WHERE equipment_category_id = @eq_catid);    
      
############### insert record into sports equipment 
INSERT INTO sports_equipment   
    (equipment_id, booking_id, equipment_type_id,   
     equipment_quantity, eq_cost_by_booking)   
VALUES     
    (NULL, @bookid, @eq_typeid,   
     @quantity_hangglider, 2 * @eq_cost_for_journey);  

############### sporting firearm set eq type and category in order to retrieve price 
SET @eq_typeid =         
    (SELECT equipment_type_id     
     FROM sports_equipment_type    
     WHERE equipment_type = "Sporting firearm");   
   
SET @eq_catid =         
    (SELECT equipment_category_id     
     FROM sports_equipment_type    
     WHERE equipment_type = "Sporting firearm");    
    
SET @eq_cost_for_journey =    
    (SELECT equipment_price     
     FROM sports_equipment_category    
     WHERE equipment_category_id = @eq_catid);    
      
############### insert record into sports equipment 
INSERT INTO sports_equipment   
    (equipment_id, booking_id, equipment_type_id,   
     equipment_quantity, eq_cost_by_booking)   
VALUES     
    (NULL, @bookid, @eq_typeid,   
     @quantity_firearm, 2 * @eq_cost_for_journey); 

      
COMMIT; 

###############################################################################################
RETRIEVE THE SUMMARY FOR BAGS AND SPORTS EQUIPMENT
###############################################################################################

SET @bookid = 13;  

SELECT bt.baggage_type AS "Type", 
    b.baggage_quantity AS "Quantity", 
    b.bag_cost_by_booking AS "Cost"  
FROM baggage_type bt  
INNER JOIN baggage b  
    ON bt.baggage_type_id = b.baggage_type_id  
WHERE b.booking_id = @bookid;  
  
SELECT st.equipment_type as "Type", 
    se.equipment_quantity AS "Quantity", 
    se.eq_cost_by_booking AS "Cost" 
FROM sports_equipment_type st 
INNER JOIN sports_equipment se 
    ON se.equipment_type_id = st.equipment_type_id
WHERE se.booking_id = @bookid;  

###############################################################################################
INSERT BAGGAGE AND SPORTS EQUIPMENT LINE ITEMS INTO THE LINE ITEM TABLE###############################################################################################

START TRANSACTION;

############### modelling user selected choices
SET @bookid = 13;  
  
############### baggage line type of 8
SET @linetype = 8;  
SET @total_bag_cost =   
    (SELECT SUM(baggage_quantity * bag_cost_by_booking)  
     FROM baggage  
     WHERE booking_id = @bookid);  

INSERT INTO booking_line_item    
    (booking_line_item_id, booking_id, line_item_type_id, line_item_amount)    
VALUES    
    (NULL, @bookid, @linetype, @total_bag_cost);  
  
############### sports equipment line type of 10
SET @linetype = 10;  
SET @total_eq_cost =   
    (SELECT SUM(equipment_quantity * eq_cost_by_booking)  
     FROM sports_equipment  
     WHERE booking_id = @bookid); 
 
INSERT INTO booking_line_item    
    (booking_line_item_id, booking_id, line_item_type_id, line_item_amount)    
VALUES    
    (NULL, @bookid, @linetype, @total_eq_cost);

COMMIT; 

###############################################################################################
RETRIEVE VOUCHER COSTS PER PASSENGER 
###############################################################################################

############### modelling user selected choices
SET @bookid = 13; 

SELECT pt.passenger_type AS "Passenger Type", 
    p.passenger_id AS "Passenger", 
    vp.voucher_price AS "Voucher Price"
FROM passenger p
INNER JOIN passenger_type pt
    ON pt.passenger_type_id = p.passenger_type_id
INNER JOIN voucher_price vp 
    ON vp.passenger_type_id = p.passenger_type_id 
    
############### conditional on adult or child passengers only
############### and standard rate for display purposes (not online)
WHERE p.passenger_type_id IN (1, 2) 
    AND voucher_booking_type = "Standard" 
    AND booking_id = @bookid;

###############################################################################################
INSERT THE CHOSEN QUANTITY OF VOUCHERS AGAINST THE BOOKING
###############################################################################################

START TRANSACTION; 
SET @bookid = 13;
############### modelling user selected choices 
############### adult passengers, quantity, 
############### and discounted price for online booking
SET @paxtype = 1; 
SET @vch_quantity = 2;
 
SET @vch_priceid =  
    (SELECT voucher_price_id  
     FROM voucher_price 
     WHERE passenger_type_id = @paxtype 
         AND voucher_booking_type = "Discount"); 
SET @vch_price =  
    (SELECT voucher_price  
     FROM voucher_price 
     WHERE voucher_price_id = @vch_priceid); 
  
INSERT INTO voucher_food_drink  
    (voucher_id, booking_id, voucher_price_id, voucher_quantity, vch_cost_by_booking)  
VALUES  
    (NULL, @bookid, @vch_priceid, @vch_quantity, 2 * @vch_price); 

############### modelling user selected choices   
############### child passengers, quantity 
############### and discounted price for online booking
SET @paxtype = 2; 
SET @vch_quantity = 2; 

SET @vch_priceid =  
    (SELECT voucher_price_id  
     FROM voucher_price 
     WHERE passenger_type_id = @paxtype 
         AND voucher_booking_type = "Discount"); 
SET @vch_price =  
    (SELECT voucher_price  
     FROM voucher_price 
     WHERE voucher_price_id = @vch_priceid); 
 
INSERT INTO voucher_food_drink  
    (voucher_id, booking_id, voucher_price_id, voucher_quantity, vch_cost_by_booking)  
VALUES  
    (NULL, @bookid, @vch_priceid, @vch_quantity, 2 * @vch_price); 
 
COMMIT; 

###############################################################################################
INSERT THE VOUCHER ITEMS INTO THE LINE ITEM TABLE
###############################################################################################

SET @bookid = 13;  
############### line type 3 is food and drink vouchers
SET @linetype = 3;   

SET @total_vch_cost =    
    (SELECT SUM(voucher_quantity * vch_cost_by_booking)   
     FROM voucher_food_drink   
     WHERE booking_id = @bookid);   
INSERT INTO booking_line_item     
    (booking_line_item_id, booking_id, line_item_type_id, line_item_amount)     
VALUES     
    (NULL, @bookid, @linetype, @total_vch_cost); 

###############################################################################################
INSERTING A KEY RECORD INTO THE ENCRYPTION KEY TABLE
###############################################################################################

SET @bookerid = 16;

############### create random key of 6 lowercase characters  
SELECT @key :=  
CONCAT (char(round(rand()*25)+97),  
   char(round(rand()*25)+97),  
   char(round(rand()*25)+97),  
   char(round(rand()*25)+97),  
   char(round(rand()*25)+97),  
   char(round(rand()*25)+97)) 
       AS "Booker Unique Key";  
   
INSERT INTO encryption_key   
    (encryption_key_id, booker_id, key_by_booker)   
VALUES   
    (NULL, @bookerid, @key); 

###############################################################################################
UPDATE THE BOOKER TABLE WITH FULL DETAILS
###############################################################################################

SET @bookid = 14; 
SET @bookerid =  
    (SELECT booker_id FROM booking 
     WHERE booking_id = @bookid); 
############### get the encryption key for this booker  
SET @key =  
    (SELECT key_by_booker 
     FROM encryption_key 
     WHERE booker_id = @bookerid); 
 
UPDATE booker  
SET  
    booker_title_id = '1', 
    booker_firstname = "Arduino",     
    booker_lastname = "Robot",     
    booker_email = "XnevermindX@gmail.com",     
    booker_password = AES_ENCRYPT('weakpassword999', @key), 
    booker_address1 = "Silicon Valley Tent Farm", 
    booker_town_city = "Megacity 4",     
    booker_postcode_zip = "RR1 7TL",     
    booker_country = "Bjornslund",     
    booker_dialcode = "+44", 
    booker_telephone = "798798" 
WHERE booker_id = @bookerid; 

###############################################################################################
UPDATE THE PASSENGER TABLE COPYING OVER THE BOOKER DETAILS FROM BOOKER
###############################################################################################

SET @bookid = 14;  
 
############### retrieve the first skeleton adult passenger record  
############### stored against this booking 
SET @paxid =  
    (SELECT MIN(p.passenger_id)   
     FROM passenger p  
     INNER JOIN passenger_type pt  
         ON pt.passenger_type_id = p.passenger_type_id  
     WHERE booking_id = @bookid  
         AND pt.passenger_type = "Adult"); 
 
############### flag this passenger as the booker 
UPDATE passenger  
SET is_booker = 1  
WHERE booking_id = @bookid  
    AND passenger_id = @paxid; 
 
############### copy over booker details to this passenger 
SET @bookerid =  
    (SELECT booker_id  
     FROM booking  
     WHERE booking_id = @bookid); 
SET @paxtitle =   
    (SELECT booker_title_id   
     FROM booker   
     WHERE booker_id = @bookerid);  
SET @paxfn =   
    (SELECT booker_firstname   
     FROM booker   
     WHERE booker_id = @bookerid);  
SET @paxsn =   
    (SELECT booker_lastname   
     FROM booker   
     WHERE booker_id = @bookerid);  
UPDATE passenger  
SET      
    is_booker = 1,  
    passenger_title_id = @paxtitle,  
    passenger_firstname = @paxfn,  
    passenger_lastname = @paxsn  
WHERE booking_id = @bookid  
    AND is_booker = 1; 

###############################################################################################
UPDATE PASSENGER RECORDS FOR REMAINING PASSENGERS
###############################################################################################

SET @bookid = 14;  

###############  first non-booker passenger  
SET @paxid = 26;  
SET @paxtitle = 1;  
SET @paxfn := "Frennlee";  
SET @paxsn := "Drone"; 
  
UPDATE passenger  
SET      
    passenger_title_id = @paxtitle,  
    passenger_firstname = @paxfn,  
    passenger_lastname = @paxsn  
WHERE booking_id = @bookid  
    AND passenger_id = @paxid;  
 
############### second non-booker passenger 
SET @paxid = 27;  
SET @paxtitle = 3;  
SET @paxfn = "Uncanny";  
SET @paxsn = "Valley";  
  
UPDATE passenger  
SET      
    passenger_title_id = @paxtitle,  
    passenger_firstname = @paxfn,  
    passenger_lastname = @paxsn  
WHERE booking_id = @bookid  
    AND passenger_id = @paxid;  
 
###############  third non-booker passenger 
SET @paxid = 28;  
SET @paxtitle = 1;  
SET @paxfn = "Barely Lethal";  
SET @paxsn = "Nanobot";  
  
UPDATE passenger  
SET      
    passenger_title_id = @paxtitle,  
    passenger_firstname = @paxfn,  
    passenger_lastname = @paxsn  
WHERE booking_id = @bookid  
    AND passenger_id = @paxid;  

###############################################################################################
RETRIEVE THE PASSENGER SUMMARY DETAILS AND THE FINAL PRICE
###############################################################################################

SET @bookid = 13; 

############### booker summary  
SET @bookerid = 
    (SELECT booker_id   
     FROM booking   
     WHERE booking_id = @bookid); 

############### set address2 to the address and a comma 
############### ONLY IF it’s NOT NULL, otherwise empty string 
SET @address2 =  
    (SELECT IF(booker_address2 IS NOT NULL, CONCAT(booker_address2,", "), "") 
     FROM booker 
     WHERE booker_id = @bookerid); 

SELECT  
    CONCAT(booker_firstname, " ", booker_lastname) AS Name, 
    booker_email AS Email, 
    booker_country AS Country, 
    CONCAT(booker_dialcode, " ", booker_telephone) AS Mobile, 
    CONCAT(booker_address1,", ", @address2,  
        booker_town_city, ", ", booker_postcode_zip) AS Address 
    FROM booker 
    WHERE booker_id = @bookerid; 
 
############### passenger summary 
SELECT CONCAT(passenger_firstname, " ", passenger_lastname) AS Passenger 
FROM passenger 
WHERE booking_id = @bookid; 
 
############### final price  
SELECT SUM(line_item_amount) AS "Final Price"  
FROM booking_line_item  
WHERE booking_id = @bookid; 

###############################################################################################
ENCRYPTING INSERTING AND DECRYPTING THE BOOKER'S CARD DETAILS
###############################################################################################

SET @bookid = 14;  
SET @bookerid =   
    (SELECT booker_id FROM booking  
     WHERE booking_id = @bookid);  
  
############### get the encryption key for this booker 
SET @key =   
    (SELECT key_by_booker  
     FROM encryption_key  
     WHERE booker_id = @bookerid);  
  
###############  modelling user-entered details 
SET @cardno := "776688599446655"; 
SET @holdername := "Arduino X Robot"; 
SET @expiry := "2021-05-22"; 
  
INSERT INTO card_details  
    (card_details_id, booker_id, card_number, cardholder_name, card_expiry_date)  
VALUES  
    (NULL, @bookerid,  
     AES_ENCRYPT(@cardno, @key), 
     AES_ENCRYPT(@holdername, @key), 
     AES_ENCRYPT(@expiry, @key)); 

  
############### retrieve the encryption key for this booker 
SELECT AES_DECRYPT(cardholder_name, @key),
    AES_DECRYPT(card_number, @key),
    AES_DECRYPT(card_expiry_date, @key) 
FROM card_details 
WHERE booker_id = @bookerid; 
 
###############################################################################################
INSERT THE PAYMENT RECORD IN THE PAYMENT TABLE AGAINST THE CARD
###############################################################################################

SET @bookid = 13;  
 
############### retrieve the final basket price 
SET @final_price =   
    (SELECT SUM(line_item_amount)  
     FROM booking_line_item  
     WHERE booking_id = @bookid);  
 
SET @cardid = 
    (SELECT card_details_id  
     FROM card_details 
     WHERE booker_id =  
         (SELECT booker_id FROM booking   
          WHERE booking_id = @bookid)); 
  
INSERT INTO payment  
    (payment_id, booking_id, payment_amount, payment_date, payment_time, card_details_id)  
VALUES  
    (NULL, @bookid, @final_price, CURDATE(), CURTIME(), @cardid); 


